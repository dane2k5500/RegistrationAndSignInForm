{"version":3,"sources":["forms/SignUpForm.js","forms/SignInForm.js","App.js","serviceWorker.js","index.js"],"names":["SignUpForm","state","email","password","name","hasAgreed","handleChange","bind","handleSubmit","e","target","value","type","checked","this","setState","preventDefault","console","log","className","onSubmit","htmlFor","id","placeholder","onChange","href","to","Component","SignInForm","App","exact","activeClassName","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UA0EeA,E,YArEX,aAAe,IAAD,8BACV,+CAEKC,MAAQ,CACTC,MAAO,GACPC,SAAU,GACVC,KAAM,GACNC,WAAW,GAGf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAXV,E,0EAcDE,GACT,IAAIC,EAASD,EAAEC,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DP,EAAOM,EAAON,KAElBU,KAAKC,SAAL,eACKX,EAAQO,M,mCAIJF,GACTA,EAAEO,iBAEFC,QAAQC,IAAI,mDACZD,QAAQC,IAAIJ,KAAKb,S,+BAIjB,OACI,yBAAKkB,UAAU,cACX,yBAAKA,UAAU,mBACX,2BAAOA,UAAU,4BAAjB,YAEJ,0BAAMA,UAAU,aAAaC,SAAUN,KAAKN,cACxC,yBAAKW,UAAU,aACX,2BAAOA,UAAU,mBAAmBE,QAAQ,QAA5C,aACA,2BAAOT,KAAK,OAAOU,GAAG,OAAOH,UAAU,mBAAmBI,YAAY,uBAAuBnB,KAAK,OAClGO,MAAOG,KAAKb,MAAMG,KAAMoB,SAAUV,KAAKR,gBAE3C,yBAAKa,UAAU,aACX,2BAAOA,UAAU,mBAAmBE,QAAQ,YAA5C,YACA,2BAAOT,KAAK,WAAWU,GAAG,WAAWH,UAAU,mBAAmBI,YAAY,sBAAsBnB,KAAK,WACzGO,MAAOG,KAAKb,MAAME,SAAUqB,SAAUV,KAAKR,gBAE/C,yBAAKa,UAAU,aACX,2BAAOA,UAAU,mBAAmBE,QAAQ,SAA5C,iBACA,2BAAOT,KAAK,QAAQU,GAAG,QAAQH,UAAU,mBAAmBI,YAAY,mBAAmBnB,KAAK,QAChGO,MAAOG,KAAKb,MAAMC,MAAOsB,SAAUV,KAAKR,gBAG5C,2BAAOa,UAAU,4BACb,2BAAOA,UAAU,sBAAsBP,KAAK,WAAWR,KAAK,YAAYO,MAAOG,KAAKb,MAAMI,UAAWmB,SAAUV,KAAKR,eADxH,oBACwJ,uBAAGmB,KAAK,GAAGN,UAAU,wBAArB,qBAIxJ,yBAAKA,UAAU,aACX,4BAAQA,UAAU,qBAAlB,WACA,2BAAOA,UAAU,mBAAjB,4BAAmE,kBAAC,IAAD,CAAMO,GAAG,WAAWP,UAAU,mBAA9B,iB,GA/DlEQ,aC2DVC,E,YAzDX,aAAe,IAAD,8BACV,+CAEK3B,MAAQ,CACTC,MAAO,GACPC,SAAU,IAGd,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,0EAYDE,GACT,IAAIC,EAASD,EAAEC,OACXC,EAAwB,aAAhBD,EAAOE,KAAsBF,EAAOG,QAAUH,EAAOC,MAC7DP,EAAOM,EAAON,KAElBU,KAAKC,SAAL,eACKX,EAAQO,M,mCAIJF,GACTA,EAAEO,iBAEFC,QAAQC,IAAI,mDACZD,QAAQC,IAAIJ,KAAKb,S,+BAIjB,OACI,yBAAKkB,UAAU,cACX,yBAAKA,UAAU,mBACX,2BAAOA,UAAU,4BAAjB,YAEJ,0BAAMA,UAAU,aAAaC,SAAUN,KAAKN,cACxC,yBAAKW,UAAU,aACX,2BAAOA,UAAU,mBAAmBE,QAAQ,SAA5C,iBACA,2BAAOT,KAAK,QAAQU,GAAG,QAAQH,UAAU,mBAAmBI,YAAY,mBAAmBnB,KAAK,QAC/FO,MAAOG,KAAKb,MAAMC,MAAOsB,SAAUV,KAAKR,gBAE7C,yBAAKa,UAAU,aACX,2BAAOA,UAAU,mBAAmBE,QAAQ,YAA5C,YACA,2BAAOT,KAAK,WAAWU,GAAG,WAAWH,UAAU,mBAAmBI,YAAY,sBAAsBnB,KAAK,WACzGO,MAAOG,KAAKb,MAAME,SAAUqB,SAAUV,KAAKR,gBAG/C,yBAAKa,UAAU,aACX,4BAAQA,UAAU,qBAAlB,WACA,2BAAOA,UAAU,mBAAjB,8BAAqE,kBAAC,IAAD,CAAMO,GAAG,IAAIP,UAAU,mBAAvB,qB,GAnDpEQ,aC4BVE,G,uLAvBb,OACE,kBAAC,IAAD,KACA,yBAAKV,UAAU,OACb,yBAAKA,UAAU,cACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,eACb,kBAAC,IAAD,CAASW,OAAK,EAACJ,GAAG,IAAIP,UAAU,qBAAqBY,gBAAgB,8BAArE,WACA,kBAAC,IAAD,CAASL,GAAG,WAAWP,UAAU,qBAAqBY,gBAAgB,8BAAtE,YAEF,kBAAC,IAAD,CAAOD,OAAK,EAACE,KAAK,IAAIC,UAAWjC,IAGjC,kBAAC,IAAD,CAAOgC,KAAK,WAAWC,UAAWL,W,GAdxBD,cCMEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.03c77f48.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, Link} from 'react-router-dom';\r\n\r\nclass SignUpForm extends Component\r\n{\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            name: '',\r\n            hasAgreed: false\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        let target = e.target;\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        let name = target.name;\r\n\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        console.log('The form was submitted with the following data:');\r\n        console.log(this.state);\r\n    }\r\n\r\n    render(){\r\n        return(  \r\n            <div className=\"FormCenter\">\r\n                <div className=\"ActiveFormTitle\">\r\n                    <label className=\"ActiveCurrentSignUpTitle\">Sign Up</label>\r\n                </div>\r\n                <form className=\"FormFields\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"FormField\">\r\n                        <label className=\"FormField__Label\" htmlFor=\"name\">Full Name</label>\r\n                        <input type=\"text\" id=\"name\" className=\"FormField__Input\" placeholder=\"Enter your full name\" name=\"name\" \r\n                        value={this.state.name} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"FormField\">\r\n                        <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" \r\n                        value={this.state.password} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"FormField\">\r\n                        <label className=\"FormField__Label\" htmlFor=\"email\">Email Address</label>\r\n                        <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\" \r\n                        value={this.state.email} onChange={this.handleChange}/>\r\n                    </div>\r\n\r\n                    <label className=\"FormField__CheckboxLabel\">\r\n                        <input className=\"FormField__Checkbox\" type=\"checkbox\" name=\"hasAgreed\" value={this.state.hasAgreed} onChange={this.handleChange}/>I agree with the <a href=\"\" className=\"FormField__TermsLink\">Terms of Service</a>\r\n                    </label>\r\n\r\n            \r\n                    <div className=\"FormField\">\r\n                        <button className=\"FormField__Button\">Sign Up</button>\r\n                        <label className=\"FormField__Text\">Already have an account?</label><Link to=\"/sign-in\" className=\"FormField__Link\">Log In</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUpForm;\r\n","import React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, Link} from 'react-router-dom';\r\n\r\nclass SignInForm extends Component\r\n{\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        let target = e.target;\r\n        let value = target.type === 'checkbox' ? target.checked : target.value;\r\n        let name = target.name;\r\n\r\n        this.setState({\r\n            [name] : value\r\n        });\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        console.log('The form was submitted with the following data:');\r\n        console.log(this.state);\r\n    }\r\n\r\n    render(){\r\n        return(  \r\n            <div className=\"FormCenter\">\r\n                <div className=\"ActiveFormTitle\">\r\n                    <label className=\"ActiveCurrentSignInTitle\">Sign In</label>\r\n                </div>\r\n                <form className=\"FormFields\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"FormField\">\r\n                        <label className=\"FormField__Label\" htmlFor=\"email\">Email Address</label>\r\n                        <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter your email\" name=\"email\"\r\n                         value={this.state.email} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"FormField\">\r\n                        <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter your password\" name=\"password\" \r\n                        value={this.state.password} onChange={this.handleChange}/>\r\n                    </div>\r\n            \r\n                    <div className=\"FormField\">\r\n                        <button className=\"FormField__Button\">Sign In</button>\r\n                        <label className=\"FormField__Text\">Need to create an account?</label><Link to=\"/\" className=\"FormField__Link\">Click Here</Link>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignInForm;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, NavLink} from 'react-router-dom';\nimport SignUpForm from './forms/SignUpForm.js';\nimport SignInForm from './forms/SignInForm';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n  return (\n    <Router>\n    <div className=\"App\">\n      <div className=\"Page_Left\"></div>\n      <div className=\"Page_Right\">\n        <div className=\"SwitchForms\">\n          <NavLink exact to=\"/\" className=\"SwitchForms_Button\" activeClassName=\"SwitchForms_Button--Active\">Sign Up</NavLink>\n          <NavLink to=\"/sign-in\" className=\"SwitchForms_Button\" activeClassName=\"SwitchForms_Button--Active\">Sign In</NavLink>\n        </div> \n        <Route exact path=\"/\" component={SignUpForm}>\n        \n        </Route>\n        <Route path=\"/sign-in\" component={SignInForm}>\n\n        </Route>\n      </div>\n      \n    </div>\n    </Router> \n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}